#include <iostream>

int main()
{
    // 可以用bitwise 左移或右移的形式进行对2的倍数的乘除操作

    // << bit 整体左移 (6 << 2) 就等于 0110 整体左移两位,空位用0补齐
    // 就等于 0001 1000 == 24. 相当于乘以2的平方.
    int a = 6;
    std::cout << (a << 2) << '\n';

    // 反之 >> 相当于整体右移. 如 (240 >> 4) 等于 1111 0000 整体向右移动四位.
    // 空出来的位用零补齐. 等于 0000 1111 等于 1111 也就是15.
    // 相当于 240 / 2^4
    int b = 240;
    std::cout << (b >> 4) << '\n';

    return 0;
}

/*
C++ 中的位运算符是用来直接对整数类型变量的二进制位进行操作的。
下面是对你提到的三个位运算符的解释：

按位非运算符 (~)：

作用：按位非运算符是一元运算符，作用于一个操作数，对其二进制表示的每一位进行取反操作。
即，将每个0变为1，每个1变为0。
语法：~x，其中x是一个整数。
示例：如果x为0b00001111（二进制表示，等同于十进制的15），
则~x的结果为0b11110000（这个结果依赖于x的数据类型和位数，这里假设是一个8位的数据类型）。
在实际情况中，由于大多数C++环境使用补码形式表示负数，结果可能会被解释为一个负数。
按位与运算符 (&)：

作用：按位与运算符是一个二元运算符，对两个操作数的对应位进行逻辑与操作。
只有当两个相应的二进制位都为1时，结果位才为1，否则为0。
语法：x & y，其中x和y是整数。
示例：如果x = 0b1100且y = 0b1010，则x & y = 0b1000。
按位或运算符 (|)：

作用：按位或运算符也是一个二元运算符，对两个操作数的对应位进行逻辑或操作。
如果两个相应的二进制位中至少有一个为1，则结果位为1，否则为0。
语法：x | y，其中x和y是整数。
示例：如果x = 0b1100且y = 0b1010，则x | y = 0b1110。
这些位运算符在底层编程、设备驱动开发、加密算法等领域非常有用，
因为它们可以直接操作和修改数据的二进制位
*/